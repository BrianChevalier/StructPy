%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%* file tikzcivil.sty
%*
%*
%*  Author: Crist√≥bal Tapia
%*  crtapia at gmail dot com
%*
%*  This program is free software; you can redistribute it and/or modify
%*  it under the terms of the GNU General Public License as published by
%*  the Free Software Foundation; either version 2 of the License, or
%*  (at your option) any later version.
%*
%*  This program is distributed in the hope that it will be useful,
%*  but WITHOUT ANY WARRANTY; without even the implied warranty of
%*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%*  GNU General Public License for more details.
%*
%*  You should have received a copy of the GNU General Public License
%*  along with this program; if not, write to the Free Software
%*  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
%*
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%Here are defined all kind of drawing, that are useful for the Structural Analysis.
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{tikzcivil}[2014/04/13 StructuralAnalysis Package]
\RequirePackage{tikz}
\def\packagename{tikzcivil}
\RequirePackage{fp}
\RequirePackage{pgf}
%
%Here are the tikz options that are going to be used in this package.
\usetikzlibrary{calc,arrows,shapes,positioning,
                shadows,trees,patterns,decorations.pathmorphing,
                decorations.markings
}
\tikzset{
  ground/.style={draw=black,text width=10em,line width=0.1em,pattern = north east lines},
  soil style/.style={draw=none,line width=1pt, color=white, fill,
    minimum width=3cm,minimum height=0.3cm,inner sep=0pt,
    pattern = north east lines, preaction={drop shadow={opacity=0}},
    },
  column/.style={color=black, line width=0.1em},
  spring/.style={color=black,decoration={aspect=0.3, segment length=\separation,
      amplitude=0.5em,coil},
    decorate},
  line wall/.style={color=black, line width=1pt, fill=white},
  line normal/.style={color=black, line width=1pt},
  thrust/.style={triangle 90 cap, line width=2pt},
  frame element/.style={color=black, line width=2pt},
  flecha/.style={thick,<->},
  damper/.style={thick,decoration={markings,
    mark connection node=dmp,
    mark=at position 0.5 with
    {
      \node (dmp) [thick,inner sep=0pt,transform shape,rotate=-90,minimum width=11pt,minimum height=3pt,draw=none] {};
      \draw [thick] ($(dmp.north east)+(2pt,0)$) -- (dmp.south east) -- (dmp.south west) -- ($(dmp.north west)+(2pt,0)$);
      \draw [thick] ($(dmp.north)+(0,-3pt)$) -- ($(dmp.north)+(0,3pt)$);
    }
  }, decorate},
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Define style for the dimensions
\tikzset{
  dim above/.style={to path={\pgfextra{
        \pgfinterruptpath
        \draw[>=latex,|<->|] let
        \p1=($(\tikztostart)!2mm!90:(\tikztotarget)$),
        \p2=($(\tikztotarget)!2mm!-90:(\tikztostart)$)
        in(\p1) -- (\p2) node[pos=.5,sloped,above]{#1};
        \endpgfinterruptpath
      }\tikztonodes
    }
  },
  dim below/.style={to path={\pgfextra{
        \pgfinterruptpath
        \draw[>=latex,|<->|] let
        \p1=($(\tikztostart)!2mm!90:(\tikztotarget)$),
        \p2=($(\tikztotarget)!2mm!-90:(\tikztostart)$)
        in (\p1) -- (\p2) node[pos=.5,sloped,below]{#1};
        \endpgfinterruptpath
      }\tikztonodes
    }
  },
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Calculate angle between two coordinates
% #1: name of the variable wher the value will be stored
% #2: coordinate 1
% #3: coordinate 2
\newcommand{\pgfextractangle}[3]{%
    \pgfmathanglebetweenpoints{\pgfpointanchor{#2}{center}}
                              {\pgfpointanchor{#3}{center}}
    \global\let#1\pgfmathresult
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%The following code was taken from the TikZ-mec project:
% https://gitorious.org/tikz-mec
\pgfdeclaredecoration{mec@draw@straight@load@forces}{initial}{%
  % \end{macrocode}
  % The width of each decoration is equal to the path length (stored in \verb|\pgfdecoratedpathlength|) divided by the number of arrows. The number of arrows is calculated dividing the length of the path by the distance between the arrows (contained in the \texttt{force distance} key) and rounding the result to assure an integer number
  % \begin{macrocode}
  \state{initial}[width=\pgfdecoratedpathlength/%
    round(\pgfdecoratedpathlength/\pgfkeysvalueof{/tikz/forces distance})]{%
    % \end{macrocode}
    % Loading parameters used to personalize the load appearance
    % \begin{macrocode}
    \pgf@xb=\pgfkeysvalueof{/tikz/load distance}
    \pgf@xa=\pgfkeysvalueof{/tikz/forces length}
    % \end{macrocode}
    % \verb|\pgf@xa| gets the distance between the path and the beginning of the arrows
    % \begin{macrocode}
    \advance\pgf@xa by\pgf@xb
    % \end{macrocode}
    % Draw the arrow perpendicular to the path. No need to add an arrow tip (using, for example, \verb|\pgfsetarrows{}|) at this level. It will be added at higher level in the style definition (this allows customization at user level defining \texttt{>})
    % \begin{macrocode}
    \pgfpathmoveto{\pgfpoint{0pt}{\pgf@xa}}
    \pgfpathlineto{\pgfpoint{0pt}{\pgf@xb}}
    \pgfusepath{stroke}
  }
  \state{final}{%
    % \end{macrocode}
    % The last arrow is not drawed in the \texttt{initial} state, so it is needed to add it. Same operations as above, but starting from the last point of the path
    % \begin{macrocode}
    \pgf@xb=\pgfkeysvalueof{/tikz/load distance}
    \pgf@xa=\pgfkeysvalueof{/tikz/forces length}
    \advance\pgf@xa by\pgf@xb
    \pgfpathmoveto{%
    \pgfpointadd{\pgfpoint{0pt}{\pgf@xa}}{\pgfpointdecoratedpathlast}}
    \pgfpathlineto{%
    \pgfpointadd{\pgfpoint{0pt}{\pgf@xb}}{\pgfpointdecoratedpathlast}}
    \pgfusepath{stroke}
  }
}
% \end{macrocode}
% Define a decoration that draws the box containing the arrows of a load on a straight path
% \begin{macrocode}
\pgfdeclaredecoration{mec@draw@straight@load@box}{initial}{%
  % \end{macrocode}
  % Here we use a fake width and draw only once (thanks to the \texttt{next state} option) the two paths (above and below the arrows)
  % \begin{macrocode}
  \state{initial}[width=1pt,next state=final]{
    \pgf@xa=\pgfkeysvalueof{/tikz/load distance}
    \pgf@xb=\pgfkeysvalueof{/tikz/forces length}
    \advance\pgf@xb by\pgf@xa
    % \end{macrocode}
    % Draw the path far from the structure
    % \begin{macrocode}
    \pgfpathmoveto{\pgfpoint{0pt}{\pgf@xa}}
    \pgfpathlineto{%
    \pgfpointadd{\pgfpoint{0pt}{\pgf@xa}}{\pgfpointdecoratedpathlast}}%
    % \end{macrocode}
    % Draw the path near the structure
    % \begin{macrocode}
    \pgfpathmoveto{\pgfpoint{0pt}{\pgf@xb}}
    \pgfpathlineto{%
    \pgfpointadd{\pgfpoint{0pt}{\pgf@xb}}{\pgfpointdecoratedpathlast}}%
    \pgfusepath{stroke}
  }
  \state{final}{%
    \pgfpathmoveto{\pgfpointdecoratedpathlast}
  }
}

\tikzset{load distance/.initial=10pt,
  forces distance/.initial=10pt,
  forces length/.initial=20pt,
  total distance/.initial=30pt,
  draw curved load/.style 2 args={%
    total distance={\pgfkeysvalueof{/tikz/forces length}+%
    \pgfkeysvalueof{/tikz/load distance}},%
    postaction={->,decorate,decoration={mec@draw@curved@load@forces}},%
    postaction={decorate,decoration=mec@draw@curved@load@box},%
    postaction={decorate,decoration={markings,%
        raise=\pgfkeysvalueof{/tikz/total distance},%
  mark=at position #2 with \node #1;}}},
  draw curved load/.default={[right]{$p$}}{0.999},
  draw straight load/.style 2 args={%
    total distance={\pgfkeysvalueof{/tikz/forces length}+%
    \pgfkeysvalueof{/tikz/load distance}},%
    postaction={-latex,decorate,decoration={mec@draw@straight@load@forces}},%
    postaction={decorate,decoration=mec@draw@straight@load@box},%
    postaction={decorate,decoration={markings,%
        raise=\pgfkeysvalueof{/tikz/total distance},%
  mark=at position #2 with \node #1;}}},
  draw straight load/.default={[right]{$p$}}{0.999}
}
% \end{macrocode}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Definition of a linear strain gauge node shape
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
\pgfdeclareshape{strain gauge}
%
{
  \inheritsavedanchors[from=circle]
  \inheritanchorborder[from=circle]
  %
  % Anchors
  %
  \inheritanchor[from=circle]{center}
  \inheritanchor[from=circle]{south}
  \inheritanchor[from=circle]{north}
  \anchor{east}{\centerpoint}
  \anchor{west}{\centerpoint}
  \anchor{south west}{
    \centerpoint\advance\pgf@y by-0.5\radius
  }
  \anchor{south east}{
    \centerpoint\advance\pgf@y by-0.5\radius
  }
  \anchor{north west}{
    \centerpoint\advance\pgf@y by0.5\radius
  }
  \anchor{north east}{
    \centerpoint\advance\pgf@y by0.5\radius
  }
  %
  % Background path
  %
  \backgroundpath{%
    \pgfutil@tempdima=\radius%
    \pgfmathsetlength{\pgf@xb}{\pgfkeysvalueof{/pgf/outer xsep}}%
    \pgfmathsetlength{\pgf@yb}{\pgfkeysvalueof{/pgf/outer ysep}}%
    \ifdim\pgf@xb<\pgf@yb%
      \advance\pgfutil@tempdima by-\pgf@yb%
    \else%
      \advance\pgfutil@tempdima by-\pgf@xb%
    \fi%

    \pgfutil@tempdima=\radius%
    \radius
    \pgf@xa=\pgfutil@tempdima
    \centerpoint
    \pgf@xb=\pgf@x
    \pgf@yb=\pgf@y
    \advance\pgf@yb by-\pgf@xa
    \pgfpathmoveto{\pgfpoint{\pgf@xb}{\pgf@yb}}
    \centerpoint
    \pgf@xb=\pgf@x
    \pgf@yb=\pgf@y
    \advance\pgf@yb by\pgf@xa
    \pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@yb}}
  }
}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Definition of node shape for triaxial strain gauges
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
\pgfdeclareshape{strain gauge triaxial}
%
{
  \inheritsavedanchors[from=circle]
  \inheritanchorborder[from=circle]
  %
  % Anchors
  %
  \inheritanchor[from=circle]{center}
  \inheritanchor[from=circle]{south}
  \inheritanchor[from=circle]{west}
  \inheritanchor[from=circle]{north}
  \inheritanchor[from=circle]{east}
  %
  % Background path
  %
  \backgroundpath{%
    \pgfutil@tempdima=\radius%
    \pgfmathsetlength{\pgf@xb}{\pgfkeysvalueof{/pgf/outer xsep}}%
    \pgfmathsetlength{\pgf@yb}{\pgfkeysvalueof{/pgf/outer ysep}}%
    \ifdim\pgf@xb<\pgf@yb%
      \advance\pgfutil@tempdima by-\pgf@yb%
    \else%
      \advance\pgfutil@tempdima by-\pgf@xb%
    \fi%

    \pgfutil@tempdima=\radius%
    \radius
    \pgf@xa=\pgfutil@tempdima
    \centerpoint
    \pgf@xb=\pgf@x
    \pgf@yb=\pgf@y
    \advance\pgf@xb by0.707107\pgf@xa
    \advance\pgf@yb by-0.707107\pgf@xa
    \pgfpathmoveto{\centerpoint}
    \pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@yb}}
    %
    \centerpoint
    \pgf@xb=\pgf@x
    \pgf@yb=\pgf@y
    \advance\pgf@xb by-\pgf@xa
    \pgfpathmoveto{\centerpoint}
    \pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@yb}}
    %
    \centerpoint
    \pgf@xb=\pgf@x
    \pgf@yb=\pgf@y
    \advance\pgf@yb by\pgf@xa
    \pgfpathmoveto{\centerpoint}
    \pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@yb}}
  }
}

%--------------- Read files ---------------------------------------------------%
%The files where the commands are defined are included
%------------------------------------------------------------------------------%
\input tikzcivil-geomechanics.tex
\input tikzcivil-structural.tex

\endinput
